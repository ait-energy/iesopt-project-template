# # Custom Deep Geothermal tempalte

# A custom deep geothermal heat source that produces heat which is directly supplied to the DH system
# The template consists of the deep geothermal extraction borehole, a heat exchanger with district heating,
# and possibly an air source heat pump for the return flow

# The unit can either have a fixed  capacity, the capacity can be determined by an investment decision,
# or have an existing capacity with additional possibility for investment.
# Variable OPEX, fixed OPEX, and CAPEX can also be defined if desired.

# ## Parameters

# ### Deep geothermal
# - heat_to: The Node that the deep geothermal is connected to for heat output.
# - electricity_from: The Node that the deep geothermal is connected to for electricity input.
# - capacity_existing: existing geothermal capacity (already installed, can be 0)
# - capacity_invest_min: the minimum capacity that can be installed in addition to existing capacity (can be 0, note: if greater than 0 this capacity will definitely be invested in).
# - capacity_invest_max: The capacity that can be installed in addition to existing capacity (can be 0).
# - el_for_pumping: electricity share required for pumping as ratio of energy output (DEA says it is 2-10%)
# - variable_opex: (OPTIONAL) variable OPEX other than electricitycpsts (€/heat output of geothermal), default is 0.
# - fixed_opex: (OPTIONAL) Fixed OPEX (€/unit capacity/year), default is 0.
# - capex: (OPTIONAL) CAPEX (€/unit capacity), default is 0.

# ### Heat exchanger (between deep geothermal and district heating)
# - heat_exchanger_ratio_to_dh: ratio of heat flowing from deep geothermal directly to district heating, 0 when geothermal temperature < DH temperature
# - heat_exchanger_ratio_to_return_flow: ratio of heat flowing from deep geothermal to return flow (and possibly return flow HP), 0 when geothermal temperature < DH temperature
# - heat_exchanger_variable_opex:(OPTIONAL) variable OPEX or heat excahnger(€/heat output), default is 0.

# ### Return flow heat pump
# - return_flow_hp_existing_capacity: The nominal power (electricity) of the heat pump that is already installed (can be 0).
# - return_flow_hp_min_capacity_to_invest: The minimum nominal power (electricity) of the return flow heat pump that can be installed in addition to existing capacity (can be 0, note: if greater than 0 this capacity will definitely be invested).
# - return_flow_hp_max_capacity_to_invest: The maximum nominal power (electricity) of the return flow heat pump that can be installed in addition to existing capacity (can be 0).
# - return_flow_hp_cop: The coefficient of performance of the return flow heat pump.
# - return_flow_hp_cop_min_1: The coefficient of performance of the heat pump minus 1 (needed when you also have heat from).
# - return_flow_hp_variable_opex: (OPTIONAL) Variable OPEX other than electricity costs of the return flow heat pump (€/unit energy), default is 0.
# - return_flow_hp_fixed_opex: (OPTIONAL) Fixed OPEX of the return flow heat pump (€/unit power/year), default is 0.
# - return_flow_hp_capex: (OPTIONAL) CAPEX of the return flow heat pump (€/unit power), default is 0.




parameters:
  heat_to: null
  electricity_from: null

  capacity_existing: null
  capacity_invest_min: null
  capacity_invest_max: null
  el_for_pumping: null
  variable_opex: 0
  fixed_opex: 0
  capex: 0
  _capacity: null
  _existing_capacity_present: null
  _invest: null
  _conversion: null
  _inputs: null

  heat_exchanger_ratio_to_dh: null
  heat_exchanger_ratio_to_return_flow: null
  heat_exchanger_variable_opex: 0

  enable_return_flow_hp: null
  return_flow_hp_existing_capcity: null
  return_flow_hp_min_capacity_to_invest: null
  return_flow_hp_max_capacity_to_invest: null
  return_flow_hp_cop: null
  return_flow_hp_cop_min1: null
  return_flow_hp_variable_opex: 0
  return_flow_hp_fixed_opex: 0
  return_flow_hp_capex: 0


components:

  # deep geothermal
  extraction_borehole:
    type: Unit
    inputs: <_inputs> 
    outputs: {heat: <self>.node_gt_heat_out}
    conversion: <_conversion> 
    marginal_cost:  <variable_opex> per out:heat 
    capacity: <_capacity> out:heat 

  existing_capacity:
    type: Decision
    enabled: <_existing_capacity_present>
    mode: fixed
    fixed_value: <capacity_existing>
    cost: <fixed_opex>

  invest_decision:
    type: Decision
    enabled: <_invest>
    lb: <capacity_invest_min>
    ub: <capacity_invest_max>
    cost: <capex> + <fixed_opex>

  # heat exchanger
  gt_dh_heat_exchanger:
    type: Unit
    inputs: {heat: <self>.node_gt_heat_out}
    outputs: {heat: <self>.node_gt_supply, heat_gt_return_flow: <self>.node_gt_return}
    conversion: 1 heat -> <heat_exchanger_ratio_to_dh> heat + <heat_exchanger_ratio_to_return_flow> heat_gt_return_flow
    marginal_cost: <heat_exchanger_variable_opex> per out:heat
    capacity: <_capacity> in:heat
 
  # return flow hp
  return_flow_hp:
    enabled: <enable_return_flow_hp>
    type: HeatPump
    p_nom_existing: <return_flow_hp_existing_capcity>
    p_nom_invest_min: <return_flow_hp_min_capacity_to_invest> 
    p_nom_invest_max: <return_flow_hp_max_capacity_to_invest> 
    electricity_from: <electricity_from>
    heat_from: <self>.node_gt_return 
    heat_to: <self>.node_gt_supply 
    cop: <return_flow_hp_cop> 
    cop_min_1: <return_flow_hp_cop_min1>  
    variable_opex: <return_flow_hp_variable_opex>
    fixed_opex: <return_flow_hp_fixed_opex> 
    capex: <return_flow_hp_capex>
    input_heat_carrier_name: heat_gt_return_flow 

  # nodes
  node_gt_supply:
    type: Node
    carrier: heat
  node_gt_return:
    type: Node
    carrier: heat_gt_return_flow
  node_gt_heat_out:
    type: Node
    carrier: heat  

  # geothermal reinjection profile
  injection_borehole:
    type: Profile
    mode: destroy
    carrier: heat_gt_return_flow
    node_from: <self>.node_gt_return

  # connection to DH
  con_gt_to_dh_grid:
    type: Connection
    carrier: heat
    lb: 0
    ub: <self>.con_gt_to_dh_grid_invest:value
    node_from: <self>.node_gt_supply
    node_to: <heat_to>
  con_gt_to_dh_grid_invest:
    type: Decision
    lb: 0
    ub: 100000
    cost: 0.00001
    fixed_cost: <con_gt_to_dh_grid_cost>

    # TODO: 
      # make this into its own template?
      # can have connection with specified limit or iesopt can decide on limit
      # can have cost per MW or fixed cost (no matter what size) or both
      # opportunity for variable cost or fixed opex
      # change sot that if ratio to DH is 0 there is no heat exchanger and heat flows directly to hp?

      
      


functions:
  validate: |
    # Prepare some helper variables to make the code afterwards more readable.
    capacity_existing = this.get("capacity_existing")
    capacity_invest_min = this.get("capacity_invest_min")
    capacity_invest_max = this.get("capacity_invest_max")
    el_for_pumping = this.get("el_for_pumping")
    # ratio_to_dh = this.get("heat_exchanger_ratio_to_dh")
    # ratio_to_return_flow = this.get("heat_exchanger_ratio_to_return_flow")

    # Check if `capacity_existing`, `capacity_invest_min`, and `capacity_invest_max` are nothing or numbers and non-negative.
    @check isnothing(capacity_existing) || (capacity_existing isa Number && capacity_existing >= 0)
    @check isnothing(capacity_invest_min) || (capacity_invest_min isa Number && capacity_invest_min >= 0)
    @check isnothing(capacity_invest_max) || (capacity_invest_max isa Number && capacity_invest_max >= 0)

    # Check that not all three p_nom values are 0
    sum_value = (capacity_existing === nothing ? 0 : capacity_existing) + 
                (capacity_invest_min === nothing ? 0 : capacity_invest_min) + 
                (capacity_invest_max === nothing ? 0 : capacity_invest_max)
    @check (sum_value > 0)

    # Check that not all three p_nom values are `nothing`
    @check (capacity_existing !== nothing || capacity_invest_min !== nothing || capacity_invest_max !== nothing)

    # Check if `capacity_invest_min` and `capacity_invest_max` are both `nothing` or a number and `capacity_invest_max` >= `capacity_invest_min`
    @check (isnothing(capacity_invest_min) && isnothing(capacity_invest_max)) || (capacity_invest_min isa Number && capacity_invest_max isa Number && capacity_invest_max >= capacity_invest_min)

    # Check if the `Node` parameters are `String`s.
    @check this.get("electricity_from") isa String
    @check this.get("heat_to") isa String

    # Check if `variable_opex`, `fixed_opex`, `capex` are numbers and non-negative.
    @check (this.get("variable_opex") isa Number && this.get("variable_opex") >= 0)
    @check (this.get("fixed_opex") isa Number && this.get("fixed_opex") >= 0)
    @check (this.get("capex") isa Number && this.get("capex") >= 0)

    # check on el for pumping is either nothing or a number and not negative
    @check isnothing(el_for_pumping) || (el_for_pumping isa Number && el_for_pumping >= 0)

    # check ratios to dh and to return flow are between 0 and 1 
    # @check (ratio_to_dh isa Number && ratio_to_dh >= 0 && ratio_to_dh <= 1)
    # @check (ratio_to_return_flow isa Number && ratio_to_return_flow >= 0 && ratio_to_return_flow <= 1)

  prepare: |
    # Prepare some helper variables to make the code afterwards more readable.
    capacity_existing = this.get("capacity_existing")
    capacity_invest_min = this.get("capacity_invest_min")
    capacity_invest_max = this.get("capacity_invest_max")
    elec_from = this.get("electricity_from")
    el_for_pumping = this.get("el_for_pumping")
    
    # Determine if investment should be enabled, and set the parameter (used to enable `invest_decision`).
    invest = !isnothing(capacity_invest_max) && 
             !isnothing(capacity_invest_min) &&
             (capacity_invest_max + capacity_invest_min) > 0 && 
             capacity_invest_max >= capacity_invest_min
    this.set("_invest", invest)

    # Determine if there is an existing installed capacity, (used to enable existing_capacity)
    existing_capacity_greater_than_zero = !isnothing(capacity_existing) && capacity_existing > 0
    this.set("_existing_capacity_present", existing_capacity_greater_than_zero)

    myself = this.get("self")

    if invest && existing_capacity_greater_than_zero
        # Set the capacity to the size of existing_capacity plus the invest_decision variable.
        this.set("_capacity", "$(myself).invest_decision:value + $(myself).existing_capacity:value")
    elseif invest
        # Set the capacity to the size of the invest_decision variable.
        this.set("_capacity", "$(myself).invest_decision:value")
    else
        # Set the capacity to the  size of the existing_capacity variable. 
        this.set("_capacity", "$(myself).existing_capacity:value")
    end

    # Handle the optional `el_for_pumping` parameter.
    if isnothing(el_for_pumping)
        # If `el_for_pumping` is not specified, we have no input for the deep geothermal.
        this.set("_inputs", "{}")
        this.set("_conversion", "~ -> 1 heat")
    else
        # If `el_for_pumping` is specified, we now have electricity as an input for geothermal.
        this.set("_inputs", "{electricity: $(elec_from)}")
        this.set("_conversion", "$(el_for_pumping) electricity -> 1 heat")
    end



# # Custom Combined heat and power unit

# A custom combined haeat and power unit that consumes a defined fuel and produces heat and electricity.
# The unit can either have a fixed  capacity, the capacity can be determined by an investment decision,
# or have an existing capacity with additional possibility for investment. Variable OPEX, fixed OPEX, 
# and CAPEX can also be defined if desired.

# ## Parameters
# - `thermal_power`: The thermal capacity of the CHP that is already installed (can be 0).
# - `thermal_power_lb`: The minimum thermal capacity of the CHP can be installed in addition to existing capacity (can be 0).
# - `thermal_power_ub`: The maximum thermal capacity of the CHP  that can be installed in addition to existing capacity (can be 0).
# - `fuel`: The fuel for the CHP (e.g. 'biomass' or 'electricity').
# - `electric_efficiency`: The electric efficiency of the CHP (value between 0 and 1).
# - `fuel_from`: The `Node` that this CHP is connected to for fuel input.
# - `heat_to`: The `Node` that this CHP is connected to for heat output.
# - `electricity_to`: The `Node` that this CHP is connected to for electricity output.
# - `c_b_coefficient`: backpressure coefficient - maximum power generation capacity in backpressure mode divided by the maximum heat production capacity
# - `opex_variable`: (OPTIONAL) Variable OPEX other than fuel costs (€/unit heat produced), default is 0.
# - `opex_fixed`: (OPTIONAL) Fixed OPEX (€/thermal power/time period modelled), default is 0.
# - `capex`: (OPTIONAL) CAPEX (€/thermal power), default is 0.


# ## Components
# _to be added_

# ## Usage
# _to be added_

# ## Details
# _to be added_


parameters:
  thermal_power: null
  thermal_power_lb: null
  thermal_power_ub: null
  fuel: null 
  electric_efficiency: null 
  fuel_from: null
  heat_to: null
  electricity_to: null
  opex_variable: 0
  opex_fixed: 0
  capex: 0
  c_b_coefficient: null
  #c_v_coefficient: null #TODO figure out how to include this and account for different operating modes
  _power: null
  _invest: null
  _existing_power_present: null

components:
  unit:
    type: Unit
    inputs: {<fuel>: <fuel_from>}
    outputs: {heat: <heat_to>, electricity: <electricity_to>}
    conversion: 1 <fuel> -> <electric_efficiency> electricity + <electric_efficiency>/<c_b_coefficient> heat 
    marginal_cost: <opex_variable> per out:heat 
    capacity: <_power> out:heat

  existing_power:
    type: Decision
    enabled: <_existing_power_present>
    mode: fixed
    fixed_value: <thermal_power>
    cost: <opex_fixed>

  invest_decision:
    type: Decision
    enabled: <_invest>
    lb: <thermal_power_lb>
    ub: <thermal_power_ub>
    cost: <capex> + <opex_fixed>

functions:
  validate: |
    # Prepare some helper variables to make the code afterwards more readable.
    power = this.get("thermal_power")
    power_lb = this.get("thermal_power_lb")
    power_ub = this.get("thermal_power_ub")
    efficiency = this.get("electric_efficiency")

    # Check if `power`, `power_lb`, and `power_ub` are nothing or numbers and non-negative.
    @check isnothing(power) || (power isa Number && power >= 0)
    @check isnothing(power_lb) || (power_lb isa Number && power_lb >= 0)
    @check isnothing(power_ub) || (power_ub isa Number && power_ub >= 0)

    # Check that not all three capacity values are 0
    sum_value = (power === nothing ? 0 : power) + 
                (power_lb === nothing ? 0 : power_lb) + 
                (power_ub === nothing ? 0 : power_ub)
    @check (sum_value > 0)

    # Check that not all three capacity values are `nothing`
    @check (power !== nothing || power_lb !== nothing || power_ub !== nothing)

    # Check if `power_lb` and `power_ub` are both `nothing` or a number and `power_ub` >= `power_lb`
    @check (isnothing(power_lb) && isnothing(power_ub)) || (power_lb isa Number && power_ub isa Number && power_ub >= power_lb)

    # Check if fuel is a String
    @check this.get("fuel") isa String

    # Check if efficiency is between 0 and 1 
    @check (efficiency isa Number && efficiency >= 0 && efficiency <= 1)

    # Check if the `Node` parameters are `String`s.
    @check this.get("fuel_from") isa String
    @check this.get("heat_to") isa String

    # Check if `opex_variable`, `opex_fixed`, `capex` are numbers and non-negative.
    @check (this.get("opex_variable") isa Number && this.get("opex_variable") >= 0)
    @check (this.get("opex_fixed") isa Number && this.get("opex_fixed") >= 0)
    @check (this.get("capex") isa Number && this.get("capex") >= 0)

  prepare: |
    # Prepare some helper variables to make the code afterwards more readable.
    power = this.get("thermal_power")
    power_lb = this.get("thermal_power_lb")
    power_ub = this.get("thermal_power_ub")

    # Determine if investment should be enabled, and set the parameter (used to enable `invest_decision`).
    invest = !isnothing(power_ub) && 
             !isnothing(power_lb) &&
             (power_ub + power_lb) > 0 && 
             power_ub >= power_lb
    this.set("_invest", invest)

    # Determine if there is an existing installed capacity, (used to enable existing_power)
    existing_power_greater_than_zero = !isnothing(power) && power > 0
    this.set("_existing_power_present", existing_power_greater_than_zero)

    myself = this.get("self")

    if invest && existing_power_greater_than_zero
        # Set the capacity to the size of existing_power plus the invest_decision variable.
        this.set("_power", "$(myself).invest_decision:value + $(myself).existing_power:value")
    elseif invest
        # Set the capacity to the size of the invest_decision variable.
        this.set("_power", "$(myself).invest_decision:value")
    else
        # Set the capacity to the  size of the existing_power variable. 
        this.set("_power", "$(myself).existing_power:value")
    end